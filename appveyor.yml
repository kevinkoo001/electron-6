# The config expects the following environment variables to be set:
#  - "GN_CONFIG" Build type. One of {'debug', 'testing', 'release'}.
#  - "GN_EXTRA_ARGS" Additional gn arguments for a build config,
#      e.g. 'target_cpu="x86"' to build for a 32bit platform.
#      https://gn.googlesource.com/gn/+/master/docs/reference.md#target_cpu
#      Don't forget to set up "NPM_CONFIG_ARCH" and "TARGET_ARCH" accordningly
#      if you pass a custom value for 'target_cpu'.
#  - "ELECTRON_RELEASE" Set it to '1' upload binaries on success.
#  - "NPM_CONFIG_ARCH" E.g. 'x86'. Is used to build native Node.js modules.
#      Must match 'target_cpu' passed to "GN_EXTRA_ARGS" and "TARGET_ARCH" value.
#  - "TARGET_ARCH" Choose from {'ia32', 'x64', 'arm', 'arm64', 'mips64el'}.
#      Is used in some publishing scripts, but does NOT affect the Electron binary.
#      Must match 'target_cpu' passed to "GN_EXTRA_ARGS" and "NPM_CONFIG_ARCH" value.
#  - "UPLOAD_TO_S3" Set it to '1' upload a release to the S3 bucket.
#      Otherwise the release will be uploaded to the Github Releases.
#      (The value is only checked if "ELECTRON_RELEASE" is defined.)
#
# The publishing scripts expect access tokens to be defined as env vars,
# but those are not covered here.
#
# AppVeyor docs on variables:
# https://www.appveyor.com/docs/environment-variables/
# https://www.appveyor.com/docs/build-configuration/#secure-variables
# https://www.appveyor.com/docs/build-configuration/#custom-environment-variables

version: 1.0.{build}
build_cloud: libcc-20
image: libcc-20-vs2017-15.9
environment:
  GIT_CACHE_PATH: C:\Users\electron\libcc_cache
  ELECTRON_OUT_DIR: Default
  ELECTRON_ENABLE_STACK_DUMPING: 1
build_script:
  - ps: >-
      if(($env:APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME -split "/")[0] -eq ($env:APPVEYOR_REPO_NAME -split "/")[0]) {
        Write-warning "Skipping PR build for branch"; Exit-AppveyorBuild
      }
  - echo "Building $env:GN_CONFIG build"
  - git config --global core.longpaths true
  - cd ..
  - ps: if (Test-Path src\electron) { Remove-Item src\electron -Recurse }
  - ps: Move-Item $env:APPVEYOR_BUILD_FOLDER -Destination src\electron
  - ps: $env:CHROMIUM_BUILDTOOLS_PATH="$pwd\src\buildtools"
  - ps: $env:SCCACHE_PATH="$pwd\src\electron\external_binaries\sccache.exe"
  - ps: >-
      if ($env:GN_CONFIG -eq 'release') {
        $env:GCLIENT_EXTRA_ARGS="$env:GCLIENT_EXTRA_ARGS --custom-var=checkout_boto=True --custom-var=checkout_requests=True"
      }
  - >-
      gclient config
      --name "src\electron"
      --unmanaged
      %GCLIENT_EXTRA_ARGS%
      "https://github.com/electron/electron"
  - gclient sync --with_branch_heads --with_tags --reset
  # Manually run update-external-binaries.py with system python
  - python src/electron/script/update-external-binaries.py
  - cd src
  - ps: $env:BUILD_CONFIG_PATH="//electron/build/args/%GN_CONFIG%.gn"
  - gn gen out/Default "--args=import(\"%BUILD_CONFIG_PATH%\") %GN_EXTRA_ARGS%"
  - gn check out/Default //electron:electron_lib
  - gn check out/Default //electron:electron_app
  - gn check out/Default //electron:manifests
  - gn check out/Default //electron/atom/common/api:mojo
  - ninja -C out/Default electron:electron_app
  - gn gen out/ffmpeg "--args=import(\"//electron/build/args/ffmpeg.gn\") %GN_EXTRA_ARGS%"
  - ninja -C out/ffmpeg electron:electron_ffmpeg_zip
  - ninja -C out/Default electron:electron_dist_zip
  - ninja -C out/Default electron:electron_mksnapshot_zip
  - ninja -C out/Default electron:electron_chromedriver_zip
  - ninja -C out/Default third_party/electron_node:headers
  - appveyor PushArtifact out/Default/dist.zip
  - appveyor PushArtifact out/Default/chromedriver.zip
  - appveyor PushArtifact out/ffmpeg/ffmpeg.zip
  - 7z a node_headers.zip out\Default\gen\node_headers
  - appveyor PushArtifact node_headers.zip
  - appveyor PushArtifact out/Default/mksnapshot.zip
  - appveyor PushArtifact out/Default/electron.lib
  - ps: >-
      if ($env:GN_CONFIG -eq 'release') {
        # Needed for msdia140.dll on 64-bit windows
        $env:Path += ";$pwd\third_party\llvm-build\Release+Asserts\bin"
        ninja -C out/Default electron:electron_symbols
      }
  - ps: >-
      if ($env:GN_CONFIG -eq 'release') {
        python electron\script\zip-symbols.py
        appveyor PushArtifact out/Default/symbols.zip
      }
  - python electron/script/zip_manifests/check-zip-manifest.py out/Default/dist.zip electron/script/zip_manifests/dist_zip.win.%TARGET_ARCH%.manifest
test_script:
  # Workaround for https://github.com/appveyor/ci/issues/2420
  - set "PATH=%PATH%;C:\Program Files\Git\mingw64\libexec\git-core"
  - ps: >-
      if ((-Not (Test-Path Env:\TEST_WOA)) -And (-Not (Test-Path Env:\ELECTRON_RELEASE)) -And ($env:GN_CONFIG -in "testing", "release")) {
        $env:RUN_TESTS="true"
      }
  - ps: >-
      if ($env:RUN_TESTS -eq 'true') {
        New-Item .\out\Default\gen\node_headers\Release -Type directory
        Copy-Item -path .\out\Default\electron.lib -destination .\out\Default\gen\node_headers\Release\node.lib
      } else {
        echo "Skipping tests for $env:GN_CONFIG build"
      }
  - cd electron
  - if "%RUN_TESTS%"=="true" ( echo Running test suite & node script/yarn test -- --ci --enable-logging)
  - cd ..
  - if "%RUN_TESTS%"=="true" ( echo Verifying non proprietary ffmpeg & python electron\script\verify-ffmpeg.py --build-dir out\Default --source-root %cd% --ffmpeg-path out\ffmpeg )
  - echo "About to verify mksnapshot"
  - if "%RUN_TESTS%"=="true" ( echo Verifying mksnapshot & python electron\script\verify-mksnapshot.py --build-dir out\Default --source-root %cd% )
  - echo "Done verifying mksnapshot"
deploy_script:
  - cd electron
  - ps: >-
      if (Test-Path Env:\ELECTRON_RELEASE) {
        if (Test-Path Env:\UPLOAD_TO_S3) {
          Write-Output "Uploading Electron release distribution to s3"
          & python script\upload.py --upload_to_s3
        } else {
          Write-Output "Uploading Electron release distribution to github releases"
          & python script\upload.py
        }
      } elseif (Test-Path Env:\TEST_WOA) {
        node script/ci-release-build.js --job=electron-woa-testing --ci=VSTS --armTest --appveyorJobId=$env:APPVEYOR_JOB_ID $env:APPVEYOR_REPO_BRANCH
      }
